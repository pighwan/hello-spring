package hello.hellospring.repository;

import hello.hellospring.domain.JavaMember;

import java.util.*;

//@Repository
//public class MemoryMemberRepository implements MemberRepository {
//
//    private static Map<Long, Member> store = new HashMap<>();
//    private static long sequence = 0L;    // sequence: 0, 1, 2 이렇게 생성해주는 애.
//
//    @Override
//    public Member save(Member member) {
//        member.setId(++sequence);
//        store.put(member.getId(), member);
//        return member;
//    }
//
//    @Override
//    public Optional<Member> findById(Long id) {
//        return Optional.ofNullable(store.get(id));    // null이 넘어갈 가능성이 있으니 optional로 감싸서 넘겨줌.
//    }
//
//    @Override
//    public Optional<Member> findByName(String name) {
//        return store.values().stream()
//                .filter(member -> member.getName().equals(name))
//                .findAny();                           // 하나라도 찾는 기능. 하나도 없으면 Optional로 감싸서 넘김.
//    }
//
//    @Override
//    public List<Member> findAll() {
//        return new ArrayList<>(store.values());
//    }
//
//    public void clearStore() {
//        store.clear();
//    }
//
//}

//----------------------------------------------------------------------------------------------------------
// 자바 코드로 직접 스프링 빈 등록하기

public class JavaMemoryMemberRepository implements JavaMemberRepository {

    private static Map<Long, JavaMember> store = new HashMap<>();
    private static long sequence = 0L;

    @Override
    public JavaMember save(JavaMember member) {
        member.setId(++sequence);       // db의 generated by default as identity와 같은 역할
        store.put(member.getId(), member);
        return member;
    }

    @Override
    public Optional<JavaMember> findById(Long id) {
        return Optional.ofNullable(store.get(id));
    }

    @Override
    public Optional<JavaMember> findByName(String name) {
        return store.values().stream()
                .filter(member -> member.getName().equals(name))
                .findAny();
    }

    @Override
    public List<JavaMember> findAll() {
        return new ArrayList<>(store.values());
    }

    public void clearStore() {
        store.clear();
    }

}